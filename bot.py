import os
import requests
import logging
import asyncio
import html
from urllib.parse import urlparse
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ token.env (—Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, —á—Ç–æ –∏ —Å–∫—Ä–∏–ø—Ç)
basedir = os.path.abspath(os.path.dirname(__file__))
env_path = os.path.join(basedir, "token.env")
load_dotenv(env_path)

BOT_TOKEN = os.getenv("BOT_TOKEN")
print("BOT_TOKEN =", BOT_TOKEN)  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ —Ñ–∞–π–ª–µ token.env")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

def get_danbooru_data(url: str):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Danbooru.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç URL –≤–∏–¥–∞:
      https://danbooru.donmai.us/posts/4963030?q=yoga_pants+shorts+
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–π ID –∏–∑ –ø—É—Ç–∏ –∏ –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API Danbooru.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (image_url, tags) –∏–ª–∏ (None, None) –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º URL
        parsed_url = urlparse(url)
        # –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –ø—É—Ç—å –∏–º–µ–µ—Ç –≤–∏–¥ /posts/4963030
        path_parts = parsed_url.path.strip("/").split("/")
        if len(path_parts) < 2 or path_parts[0] != "posts":
            logging.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL. –û–∂–∏–¥–∞–µ—Ç—Å—è /posts/<id>")
            return None, None

        image_id = path_parts[1]
        logging.info(f"–ò–∑–≤–ª–µ—á–µ–Ω ID: {image_id}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º API URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        api_url = f"https://danbooru.donmai.us/posts/{image_id}.json"
        logging.info(f"API URL: {api_url}")

        response = requests.get(api_url)
        if response.status_code != 200:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Danbooru API: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            return None, None

        data = response.json()
        image_url = data.get("file_url")
        tags = data.get("tag_string", "").split()
        return image_url, tags
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL: {e}")
        return None, None

@dp.message(F.text.startswith("https://danbooru.donmai.us/posts/"))
async def handle_danbooru_link(message: types.Message):
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å —Å—Å—ã–ª–∫–∏ Danbooru.
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏ —Ç–µ–≥–∞—Ö, –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–≥–∞–º–∏.
    –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–≥–∞–º–∏.
    """
    url = message.text.strip()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: {url}")

    image_url, tags = get_danbooru_data(url)
    if not image_url:
        await message.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å Danbooru.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å —Å —Ç–µ–≥–∞–º–∏ (–æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ –ø–µ—Ä–≤—ã—Ö 50 —Ç–µ–≥–æ–≤)
    tags_text = ", ".join(tags[:50]) if tags else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ HTML-–ø–∞—Ä—Å–µ—Ä–∞
    escaped_tags_text = html.escape(tags_text)
    caption = f"üîñ <b>–¢–µ–≥–∏</b>: {escaped_tags_text}"

    logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, image_url: {image_url}")
    logging.info(f"Caption: {caption}")

    try:
        await bot.send_photo(message.chat.id, image_url, caption=caption, parse_mode=ParseMode.HTML)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å —Ç–µ–≥–∞–º–∏
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–æ –≤–æ—Ç —Ç–µ–≥–∏:\n{caption}", parse_mode=ParseMode.HTML)

async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
